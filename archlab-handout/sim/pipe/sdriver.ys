#######################################################################
# Test for copying block of size 4;
#######################################################################
	.pos 0
main:	irmovq Stack, %rsp  	# Set up stack pointer

	# Set up arguments for copy function and then invoke it
	irmovq $4, %rdx		# src and dst have 4 elements
	irmovq dest, %rsi	# dst array
	irmovq src, %rdi	# src array
	call ncopy		 
	halt			# should halt with num nonzeros in %rax
StartFun:
#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Describe how and why you modified the baseline code.
#
##################################################################

# Do not modify this portion
# Function prologue.
														# %rdi = src 
														# %rsi = dst 
														# %rdx = len

                                                        # %rax = count
                                                        # %r8 = val
                                                        
ncopy:

##################################################################
# Loop header

######################## Loop1 begin
    jmp LOOP1_TEST
LOOP1:

COPY1:
    mrmovq (%rdi),%r8
    mrmovq 8(%rdi),%r9
    mrmovq 16(%rdi),%r10
    andq %r8,%r8
    rmmovq %r8,(%rsi)
    rmmovq %r9,8(%rsi)
    rmmovq %r10,16(%rsi)
    
    jle COPY2
    iaddq $1,%rax
COPY2:
    andq %r9,%r9
    jle COPY3
    iaddq $1,%rax
COPY3:
    andq %r10,%r10
    jle COPY4
    iaddq $1,%rax
COPY4:
    mrmovq 24(%rdi),%r8
    mrmovq 32(%rdi),%r9
    mrmovq 40(%rdi),%r10
    rmmovq %r8,24(%rsi)
    rmmovq %r9,32(%rsi)
    rmmovq %r10,40(%rsi)
    andq %r8,%r8
    jle COPY5
    iaddq $1,%rax
COPY5:
    andq %r9,%r9
    jle COPY6
    iaddq $1,%rax
COPY6:
    andq %r10,%r10
    jle COPY7
    iaddq $1,%rax
COPY7:
    mrmovq 48(%rdi),%r8
    mrmovq 56(%rdi),%r9
    mrmovq 64(%rdi),%r10
    rmmovq %r8,48(%rsi)
    rmmovq %r9,56(%rsi)
    rmmovq %r10,64(%rsi)
    andq %r8,%r8
    jle COPY8
    iaddq $1,%rax
COPY8:
    andq %r9,%r9
    jle COPY9
    iaddq $1,%rax
COPY9:
    iaddq $72,%rsi,
    iaddq $72,%rdi
    andq %r10,%r10
    jle LOOP1_TEST
    iaddq $1,%rax

LOOP1_TEST:
    iaddq $-9,%rdx
    jge LOOP1

########################## loop1 done


########################## loop2 begin Ê£Óà0£¬1£¬2£¬3£¬4£¬5£¬6£¬7£¬8¸ö
    # iaddq $9,%rdx
    # iaddq $-4,%rdx
    iaddq $5,%rdx
    jle REMAIN_0_1_2_3_4
    # Ê£Óà 5 6 7 8 ¸ö ¿½±´5¸ö
    mrmovq 0(%rdi),%r8                          
    mrmovq 8(%rdi),%r9
    mrmovq 16(%rdi),%r10
    mrmovq 24(%rdi),%r11
    mrmovq 32(%rdi),%r12
    rmmovq %r8,0(%rsi)
    rmmovq %r9,8(%rsi)
    rmmovq %r10,16(%rsi)
    rmmovq %r11,24(%rsi)
    rmmovq %r12,32(%rsi)
    
    andq %r8,%r8
    jle COPY10
    iaddq $1,%rax
COPY10:
    andq %r9,%r9
    jle COPY11
    iaddq $1,%rax
COPY11:
    andq %r10,%r10
    jle COPY12
    iaddq $1,%rax
COPY12:
    andq %r11,%r11
    jle COPY13
    iaddq $1,%rax
COPY13:
    iaddq $40,%rsi
    iaddq $40,%rdi
    iaddq $-5,%rdx
    andq %r12,%r12
    jle REMAIN_0_1_2_3_4
    iaddq $1,%rax

REMAIN_0_1_2_3_4:
    # iaddq $4,%rdx
    # iaddq $-2,%rdx
    iaddq $2,%rdx
    jle REMAIN_0_1_2
    # Ê£ 3 4 ¸ö ¿½±´3¸ö
    mrmovq 0(%rdi),%r8                          
    mrmovq 8(%rdi),%r9
    mrmovq 16(%rdi),%r10
    rmmovq %r8,0(%rsi)
    rmmovq %r9,8(%rsi)
    rmmovq %r10,16(%rsi)
    
    andq %r8,%r8
    jle COPY14
    iaddq $1,%rax
COPY14:
    andq %r9,%r9
    jle COPY15
    iaddq $1,%rax
COPY15:
    iaddq $24,%rsi
    iaddq $24,%rdi
    iaddq $-3,%rdx
    andq %r10,%r10
    jle REMAIN_0_1_2
    iaddq $1,%rax


REMAIN_0_1_2:
    iaddq $2,%rdx
    je LOOP2_DONE
    iaddq $-1,%rdx
    je REMAIN_1

    mrmovq 0(%rdi),%r8
    andq %r8,%r8
    rmmovq %r8,0(%rsi)
    jle COPY16
    iaddq $1,%rax
COPY16:
    iaddq $8,%rsi
    iaddq $8,%rdi
REMAIN_1:
    mrmovq 0(%rdi),%r8
    andq %r8,%r8
    rmmovq %r8,0(%rsi)
    jle LOOP2_DONE
    iaddq $1,%rax

LOOP2_DONE:
##################################################################
# Do not modify the following section of code
# Function epilogue.

	ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
EndFun:

###############################
# Source and destination blocks 
###############################
	.align 8
src:
	.quad -1
	.quad 2
	.quad -3
	.quad 4
	.quad 0xbcdefa # This shouldn't get moved

	.align 16
Predest:
	.quad 0xbcdefa
dest:
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
	.quad 0xcdefab
Postdest:
	.quad 0xdefabc

.align 8
# Run time stack
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0
	.quad 0

Stack:
